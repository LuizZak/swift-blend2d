// HEADS UP!: Auto-generated file, changes made directly here will be overwritten by code generators.
// Generated by generate_types.py

import blend2d

/// File information flags, used by `BLFileInfo`.
extension BLFileInfoFlags: @retroactive OptionSet { }

public extension BLFileInfoFlags {
    /// File owner has read permission (compatible with 0400 octal notation).
    static let ownerR = BL_FILE_INFO_OWNER_R
    
    /// File owner has write permission (compatible with 0200 octal notation).
    static let ownerW = BL_FILE_INFO_OWNER_W
    
    /// File owner has execute permission (compatible with 0100 octal notation).
    static let ownerX = BL_FILE_INFO_OWNER_X
    
    /// A combination of `BLFileInfoFlags.ownerR`, `BLFileInfoFlags.ownerW`, and `BLFileInfoFlags.ownerX`.
    static let ownerMask = BL_FILE_INFO_OWNER_MASK
    
    /// File group owner has read permission (compatible with 040 octal notation).
    static let groupR = BL_FILE_INFO_GROUP_R
    
    /// File group owner has write permission (compatible with 020 octal notation).
    static let groupW = BL_FILE_INFO_GROUP_W
    
    /// File group owner has execute permission (compatible with 010 octal notation).
    static let groupX = BL_FILE_INFO_GROUP_X
    
    /// A combination of `BLFileInfoFlags.groupR`, `BLFileInfoFlags.groupW`, and `BLFileInfoFlags.groupX`.
    static let groupMask = BL_FILE_INFO_GROUP_MASK
    
    /// Other users have read permission (compatible with 04 octal notation).
    static let otherR = BL_FILE_INFO_OTHER_R
    
    /// Other users have write permission (compatible with 02 octal notation).
    static let otherW = BL_FILE_INFO_OTHER_W
    
    /// Other users have execute permission (compatible with 01 octal notation).
    static let otherX = BL_FILE_INFO_OTHER_X
    
    /// A combination of `BLFileInfoFlags.otherR`, `BLFileInfoFlags.otherW`, and `BLFileInfoFlags.otherX`.
    static let otherMask = BL_FILE_INFO_OTHER_MASK
    
    /// Set user ID to file owner user ID on execution (compatible with 04000 octal notation).
    static let suid = BL_FILE_INFO_SUID
    
    /// Set group ID to file's user group ID on execution (compatible with 02000 octal notation).
    static let sgid = BL_FILE_INFO_SGID
    
    /// A combination of all file permission bits.
    static let permissionsMask = BL_FILE_INFO_PERMISSIONS_MASK
    
    /// A flag specifying that this is a regular file.
    static let regular = BL_FILE_INFO_REGULAR
    
    /// A flag specifying that this is a directory.
    static let directory = BL_FILE_INFO_DIRECTORY
    
    /// A flag specifying that this is a symbolic link.
    static let symlink = BL_FILE_INFO_SYMLINK
    
    /// A flag describing a character device.
    static let charDevice = BL_FILE_INFO_CHAR_DEVICE
    
    /// A flag describing a block device.
    static let blockDevice = BL_FILE_INFO_BLOCK_DEVICE
    
    /// A flag describing a FIFO (named pipe).
    static let fifo = BL_FILE_INFO_FIFO
    
    /// A flag describing a socket.
    static let socket = BL_FILE_INFO_SOCKET
    
    /// A flag describing a hidden file (Windows only).
    static let hidden = BL_FILE_INFO_HIDDEN
    
    /// A flag describing a hidden file (Windows only).
    static let executable = BL_FILE_INFO_EXECUTABLE
    
    /// A flag describing an archive (Windows only).
    static let archive = BL_FILE_INFO_ARCHIVE
    
    /// A flag describing a system file (Windows only).
    static let system = BL_FILE_INFO_SYSTEM
    
    /// File information is valid (the request succeeded).
    static let valid = BL_FILE_INFO_VALID
}
