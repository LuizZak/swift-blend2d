// HEADS UP!: Auto-generated file, changes made directly here will be overwritten by code generators.
// Generated by generate_types.py

import blend2d

extension BLImageInfo: CustomStringConvertible, Equatable, Hashable { }

public extension BLImageInfo {
    var description: String {
        "BLImageInfo(size: \(size), density: \(density), flags: \(flags), depth: \(depth), planeCount: \(planeCount), frameCount: \(frameCount), format.0: \(format.0), format.1: \(format.1), format.2: \(format.2), format.3: \(format.3), format.4: \(format.4), format.5: \(format.5), format.6: \(format.6), format.7: \(format.7), format.8: \(format.8), format.9: \(format.9), format.10: \(format.10), format.11: \(format.11), format.12: \(format.12), format.13: \(format.13), format.14: \(format.14), format.15: \(format.15), compression.0: \(compression.0), compression.1: \(compression.1), compression.2: \(compression.2), compression.3: \(compression.3), compression.4: \(compression.4), compression.5: \(compression.5), compression.6: \(compression.6), compression.7: \(compression.7), compression.8: \(compression.8), compression.9: \(compression.9), compression.10: \(compression.10), compression.11: \(compression.11), compression.12: \(compression.12), compression.13: \(compression.13), compression.14: \(compression.14), compression.15: \(compression.15))"
    }
    
    static func == (lhs: Self, rhs: Self) -> Bool {
        lhs.size == rhs.size && lhs.density == rhs.density && lhs.flags == rhs.flags && lhs.depth == rhs.depth && lhs.planeCount == rhs.planeCount && lhs.frameCount == rhs.frameCount && lhs.format.0 == rhs.format.0 && lhs.format.1 == rhs.format.1 && lhs.format.2 == rhs.format.2 && lhs.format.3 == rhs.format.3 && lhs.format.4 == rhs.format.4 && lhs.format.5 == rhs.format.5 && lhs.format.6 == rhs.format.6 && lhs.format.7 == rhs.format.7 && lhs.format.8 == rhs.format.8 && lhs.format.9 == rhs.format.9 && lhs.format.10 == rhs.format.10 && lhs.format.11 == rhs.format.11 && lhs.format.12 == rhs.format.12 && lhs.format.13 == rhs.format.13 && lhs.format.14 == rhs.format.14 && lhs.format.15 == rhs.format.15 && lhs.compression.0 == rhs.compression.0 && lhs.compression.1 == rhs.compression.1 && lhs.compression.2 == rhs.compression.2 && lhs.compression.3 == rhs.compression.3 && lhs.compression.4 == rhs.compression.4 && lhs.compression.5 == rhs.compression.5 && lhs.compression.6 == rhs.compression.6 && lhs.compression.7 == rhs.compression.7 && lhs.compression.8 == rhs.compression.8 && lhs.compression.9 == rhs.compression.9 && lhs.compression.10 == rhs.compression.10 && lhs.compression.11 == rhs.compression.11 && lhs.compression.12 == rhs.compression.12 && lhs.compression.13 == rhs.compression.13 && lhs.compression.14 == rhs.compression.14 && lhs.compression.15 == rhs.compression.15
    }
    
    func hash(into hasher: inout Hasher) {
        hasher.combine(size)
        hasher.combine(density)
        hasher.combine(flags)
        hasher.combine(depth)
        hasher.combine(planeCount)
        hasher.combine(frameCount)
        hasher.combine(format.0)
        hasher.combine(format.1)
        hasher.combine(format.2)
        hasher.combine(format.3)
        hasher.combine(format.4)
        hasher.combine(format.5)
        hasher.combine(format.6)
        hasher.combine(format.7)
        hasher.combine(format.8)
        hasher.combine(format.9)
        hasher.combine(format.10)
        hasher.combine(format.11)
        hasher.combine(format.12)
        hasher.combine(format.13)
        hasher.combine(format.14)
        hasher.combine(format.15)
        hasher.combine(compression.0)
        hasher.combine(compression.1)
        hasher.combine(compression.2)
        hasher.combine(compression.3)
        hasher.combine(compression.4)
        hasher.combine(compression.5)
        hasher.combine(compression.6)
        hasher.combine(compression.7)
        hasher.combine(compression.8)
        hasher.combine(compression.9)
        hasher.combine(compression.10)
        hasher.combine(compression.11)
        hasher.combine(compression.12)
        hasher.combine(compression.13)
        hasher.combine(compression.14)
        hasher.combine(compression.15)
    }
}
